stop("x must be a single numeric value")
}
if (length(k) != 1 || k < 1) {
stop("k must >= 1")
}
result <- 1
for (i in 1:k) {
result <- result + ((-1)^i * x^(2*i + 1)) / factorial(2*i + 1)
}
return(result)
}
sin(1,5)
a <- (1,2,3,4,5)
a <- c(1,2,3,4,5)
type(a)
typeof(a)
#' @details This function calculate the sample mean
#'
#' @param x a vector of numbers of length N
#'
#' @return the sample mean of x
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' sample_mean(a)
#'
sample_mean <- function(x) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
stop("all elements of x must be numeric")
}
result <- 0
for (i in x){
result <- result + i
}
result <- result/length(x)
return(result)
}
sample_mean(a)
sample_mean(c('apple', 1, 3))
#' @details This function calculate the sample standard deviation
#'
#' @param x a vector of numbers of length N
#'
#' @return the sample sd of x
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' sample_sd(a)
#'
sample_sd <- function(x) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
stop("all elements of x must be numeric")
}
result <- 0
for (i in x) {
result <- result + (i - sample_mean(x)) ^ 2
}
result <- sqrt(result/(length(x) - 1))
return(result)
}
sample_sd(a)
sd(a)
#' @details This function calculate the confidence intervals
#'
#' @param x a vector of numbers of length N
#'
#' @return the sample CI of x
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' calculate_CI(a)
#'
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
stop("all elements of x must be numeric")
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
result <- c(lower_bound, upper_bound)
names(result) <- c("lower_bound", "upper_bound")
return(result)
}
calculate_CI(a)
# Define the ci_class constructor function
make_ci_class <- function(lower_bound, upper_bound, observations) {
structure(
list(lower_bound = lower_bound, upper_bound = upper_bound, observations = observations),
class = "ci_class"
)
}
# Define the print method for the ci_class
print.ci_class <- function(x) {
cat("Class: ci_class\n")
cat("Number of Observations:", x$observations, "\n")
}
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
stop("all elements of x must be numeric")
}
standard_error <- sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- mean(x) - margin_error
upper_bound <- mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
set.seed(1234)
x <- rnorm(100)
obj <- make_ci_class(x)
# Define the ci_class constructor function
make_ci_class <- function(observations) {
structure(
list(observations = observations),
class = "ci_class"
)
}
obj <- make_ci_class(x)
obj
calculate_CI(obj, conf = 0.9)
calculate_CI(obj)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
standard_error <- sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- mean(x) - margin_error
upper_bound <- mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
stop("all elements of x must be numeric")
}
standard_error <- sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- mean(x) - margin_error
upper_bound <- mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj)
# Define the print method for the ci_class
print.ci_class <- function(x) {
cat("a ci_class with ", length(x$observations, "observations"))
}
obj
print(obj)
# Define the print method for the ci_class
print.ci_class <- function(x) {
cat("a ci_class with ", length(x$observations), "observations")
}
print(obj)
# Define the print method for the ci_class
print.ci_class <- function(x) {
cat("a ci_class with", length(x$observations), "observations")
}
print(obj)
obj
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj)
#' @details This function calculate the sample mean
#'
#' @param x a vector of numbers of length N
#'
#' @return the sample mean of x
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' sample_mean(a)
#'
sample_mean <- function(x) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
result <- 0
for (i in x){
result <- result + i
}
result <- result/length(x)
return(result)
}
#' @details This function calculate the sample standard deviation
#'
#' @param x a vector of numbers of length N
#'
#' @return the sample sd of x
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' sample_sd(a)
#'
sample_sd <- function(x) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
result <- 0
for (i in x) {
result <- result + (i - sample_mean(x)) ^ 2
}
result <- sqrt(result/(length(x) - 1))
return(result)
}
calculate_CI(obj)
calculate_CI(obj, conf = 0.9)
#' @param x a vector of numbers of length N
#'
#' @return the sample CI of x
#'
#' @export
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' calculate_CI(a)
#'
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
stop("all elements of x must be numeric")
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
result <- c(lower_bound, upper_bound)
names(result) <- c("lower_bound", "upper_bound")
return(result)
}
calculate_CI(obj, conf = 0.9)
#' @param x a vector of numbers of length N
#'
#' @return the sample CI of x
#'
#' @export
#'
#' @examples
#' a <- c(1,2,3,4,5)
#' calculate_CI(a)
#'
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
result <- c(lower_bound, upper_bound)
names(result) <- c("lower_bound", "upper_bound")
return(result)
}
calculate_CI(obj, conf = 0.9)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
numeric(x)
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj, conf = 0.9)
?numeric()
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (!all(is.numeric(x))) {
as.numeric(x)
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj, conf = 0.9)
as.numeric(obj)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (is.list(x) == TRUE) {
x = x$value
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj, conf = 0.9)
calculate_CI(obj, conf = 0.9)
obj
View(obj)
x <- rnorm(100)
obj <- make_ci_class(x)
typeof(obj)
View(obj)
View(obj)
obj$observations
if (is.list(x) == TRUE) {
x = x$observations
}
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (is.list(x) == TRUE) {
x = x$observations
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj, conf = 0.9)
# Define the ci_class constructor function
make_ci_class <- function(lower_bound, upper_bound, observations) {
structure(
list(lower_bound = lower_bound, upper_bound = upper_bound, observations = observations),
class = "ci_class"
)
}
# Define the print method for the ci_class
print.ci_class <- function(x) {
cat("a ci_class with", length(x$observations), "observations")
}
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (is.list(x) == TRUE) {
x = x$observations
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
result <- make_ci_class(lower_bound, upper_bound, length(x))
return(result)
}
calculate_CI(obj, conf = 0.9)
obj$observations
typeof(obj$observations)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (is.list(x) == TRUE) {
x = x$observations
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
cat(upper_bound, lower_bound)
}
calculate_CI(obj, conf = 0.9)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (is.list(x) == TRUE) {
x = x$observations
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
cat("lower_bound upper_bound")
cat(lower_bound, upper_bound)
}
calculate_CI(obj, conf = 0.9)
# Modify the calculate_CI function to work with ci_class
calculate_CI <- function(x, conf = 0.95) {
if (length(x) == 0) {
stop("x must have a length greater than 0")
}
if (is.list(x) == TRUE) {
x = x$observations
}
standard_error <- sample_sd(x) / sqrt(length(x))
margin_error <- qt((1 + conf) / 2, df = length(x) - 1) * standard_error
lower_bound <- sample_mean(x) - margin_error
upper_bound <- sample_mean(x) + margin_error
# Create an instance of ci_class
cat("lower_bound upper_bound\n")
cat(lower_bound, upper_bound)
}
calculate_CI(obj, conf = 0.9)
#' @param x numeric, the number to be transformed
#' @param k integer, the number of terms to be used in the series expansion beyond the constant 1. The value of k is always >= 1.
#'
#' @return the sine value of input number
#'
#' @export
#'
#' @examples
#' fn_sin(1,5)
#'
fn_sin <- function(x, k) {
if (!is.numeric(x) || length(x) != 1) {
stop("x must be a single numeric value")
}
if (length(k) != 1 || k < 1) {
stop("k must >= 1")
}
result <- 1
for (i in 1:k) {
result <- result + ((-1)^i * x^(2*i + 1)) / factorial(2*i + 1)
}
return(result)
}
#' @param x numeric, the number to be transformed
#' @param k integer, the number of terms to be used in the series expansion beyond the constant 1. The value of k is always >= 1.
#'
#' @return the cosine value of input number
#'
#' @export
#'
#' @examples
#' fn_cos(1,5)
#'
fn_cos <- function(x, k) {
if (!is.numeric(x) || length(x) != 1) {
stop("x must be a single numeric value")
}
if (length(k) != 1 || k < 1) {
stop("k must >= 1")
}
result <- 1
for (i in 1:k) {
result <- result + ((-1)^i * x^(2*i)) / factorial(2*i)
}
return(result)
}
library(Rpackage)
library(Rpackage)
library(functions)
library(functions)
library(functions)
# Generate x values
x_values <- seq(0, 10, length.out = 100)
# Plot cos(x) as points
plot(x_values, cos(x_values), type = "p", col = "black", pch = 20, xlab = "x", ylab = "Function Output", main = "fn_cos vs cos(x)")
cos(x_value)
x_values <- seq(0, 10, length.out = 100)
cos(x_value)
cos(x_values)
